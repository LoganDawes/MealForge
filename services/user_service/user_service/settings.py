"""
Django settings for user_service project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from .logging_handler import CustomHTTPHandler
import json
import environ
import logging

# Initialize environment variables
env = environ.Env()
environ.Env.read_env(env_file=Path(__file__).resolve().parent.parent / '.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'core',
    'rest_framework',
    'corsheaders',
    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default Django authentication backend
]

ROOT_URLCONF = 'user_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': env.str('DB_NAME'),
        'USER': env.str('DB_USER'),
        'PASSWORD': env.str('DB_PASSWORD'),
        'HOST': env.str('DB_HOST'),  # Use the same server
        'PORT': env.str('DB_PORT'),
        'OPTIONS': {
            #'ssl': {'ca': './DigiCertGlobalRootCA.crt.pem'},
            'ssl': {'ssl_disabled': True},
        }
    }
}

# Celery Configuration
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_RESULT_BACKEND = 'redis://redis:6379/0'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Expiration time for access tokens
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Expiration time for refresh tokens
    'SIGNING_KEY': env.str('SIGNING_KEY'),
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

class LogFormatter(logging.Formatter):
    def format(self, record):
        try:
            record.service_name = 'User Management Service'
            return json.dumps({
            'service_name': record.service_name,
            'log_level': record.levelname,
            'message': record.getMessage()
        })
        except Exception as e:
            record.message = f"Error formatting log record: {e}"
            return super().format(record)
        
class ConsoleLogFormatter(logging.Formatter):
    def format(self, record):
        try:
            record.service_name = 'User Management Service'
            return super().format(record)
        except Exception as e:
            record.message = f"Error formatting log record: {e}"
            return super().format(record)

# Logging Settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'custom': {
            '()': LogFormatter,
            'format': '%(service_name)s - %(levelname)s - %(message)s',
        },
        'console': {
            '()': ConsoleLogFormatter,
            'format': '%(service_name)s - %(levelname)s - %(message)s',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
        'http': {
            'level': 'WARNING',
            'class': 'user_service.logging_handler.CustomHTTPHandler',
            'host': env.str('LOGGING_HOST'),
            'url': env.str('LOGGING_ENDPOINT'),
            'method': 'POST',
            'formatter': 'custom',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'http'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

CORS_ALLOW_ALL_ORIGINS = False

# Allow specific origins
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[])

# URLS
AUTH_SERVICE_URL = env.str('AUTH_SERVICE_URL')
USER_SERVICE_URL = env.str('USER_SERVICE_URL')
SEARCH_SERVICE_URL = env.str('SEARCH_SERVICE_URL')
INTEGRATION_SERVICE_URL = env.str('INTEGRATION_SERVICE_URL')
LOGGING_SERVICE_URL = env.str('LOGGING_SERVICE_URL')